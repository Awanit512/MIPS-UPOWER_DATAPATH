$date
	Sun Jun 14 14:13:34 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var reg 1 ! clk $end
$var integer 32 " i [31:0] $end
$scope module mips1 $end
$var wire 4 # aluctl [3:0] $end
$var wire 2 $ aluop [1:0] $end
$var wire 2 % aluop_s3 [1:0] $end
$var wire 32 & alurslt [31:0] $end
$var wire 32 ' alurslt_s4 [31:0] $end
$var wire 32 ( alurslt_s5 [31:0] $end
$var wire 1 ) alusrc $end
$var wire 32 * alusrc_data2 [31:0] $end
$var wire 1 + alusrc_s3 $end
$var wire 32 , baddr_s2 [31:0] $end
$var wire 32 - baddr_s3 [31:0] $end
$var wire 32 . baddr_s4 [31:0] $end
$var wire 1 / branch_eq_s2 $end
$var wire 1 0 branch_eq_s3 $end
$var wire 1 1 branch_eq_s4 $end
$var wire 1 2 branch_ne_s2 $end
$var wire 1 3 branch_ne_s3 $end
$var wire 1 4 branch_ne_s4 $end
$var wire 1 5 clk $end
$var wire 32 6 data1 [31:0] $end
$var wire 32 7 data1_s3 [31:0] $end
$var wire 32 8 data2 [31:0] $end
$var wire 32 9 data2_s3 [31:0] $end
$var wire 32 : data2_s4 [31:0] $end
$var wire 6 ; funct [5:0] $end
$var wire 16 < imm [15:0] $end
$var wire 32 = inst [31:0] $end
$var wire 32 > inst_s2 [31:0] $end
$var wire 32 ? jaddr_s2 [31:0] $end
$var wire 32 @ jaddr_s3 [31:0] $end
$var wire 32 A jaddr_s4 [31:0] $end
$var wire 1 B jump_s2 $end
$var wire 1 C jump_s3 $end
$var wire 1 D jump_s4 $end
$var wire 1 E memread $end
$var wire 1 F memread_s3 $end
$var wire 1 G memread_s4 $end
$var wire 1 H memtoreg $end
$var wire 1 I memtoreg_s3 $end
$var wire 1 J memtoreg_s4 $end
$var wire 1 K memtoreg_s5 $end
$var wire 1 L memwrite $end
$var wire 1 M memwrite_s3 $end
$var wire 1 N memwrite_s4 $end
$var wire 6 O opcode [5:0] $end
$var wire 32 P pc4 [31:0] $end
$var wire 32 Q pc4_s2 [31:0] $end
$var wire 32 R pc4_s3 [31:0] $end
$var wire 5 S rd [4:0] $end
$var wire 5 T rd_s3 [4:0] $end
$var wire 32 U rdata [31:0] $end
$var wire 32 V rdata_s5 [31:0] $end
$var wire 1 W regdst $end
$var wire 1 X regdst_s3 $end
$var wire 1 Y regwrite $end
$var wire 1 Z regwrite_s3 $end
$var wire 1 [ regwrite_s4 $end
$var wire 1 \ regwrite_s5 $end
$var wire 5 ] rs [4:0] $end
$var wire 5 ^ rs_s3 [4:0] $end
$var wire 5 _ rt [4:0] $end
$var wire 5 ` rt_s3 [4:0] $end
$var wire 32 a seimm [31:0] $end
$var wire 32 b seimm_s3 [31:0] $end
$var wire 32 c seimm_sl2 [31:0] $end
$var wire 5 d shamt [4:0] $end
$var wire 32 e wrdata_s5 [31:0] $end
$var wire 5 f wrreg [4:0] $end
$var wire 5 g wrreg_s4 [4:0] $end
$var wire 5 h wrreg_s5 [4:0] $end
$var wire 1 i zero_s3 $end
$var wire 1 j zero_s4 $end
$var reg 1 k flush_s1 $end
$var reg 1 l flush_s2 $end
$var reg 1 m flush_s3 $end
$var reg 2 n forward_a [1:0] $end
$var reg 2 o forward_b [1:0] $end
$var reg 32 p fw_data1_s3 [31:0] $end
$var reg 32 q fw_data2_s3 [31:0] $end
$var reg 32 r pc [31:0] $end
$var reg 1 s pcsrc $end
$var reg 1 t stall_s1_s2 $end
$scope module regr_pc4_s2 $end
$var wire 1 u clear $end
$var wire 1 5 clk $end
$var wire 1 v hold $end
$var wire 32 w in [31:0] $end
$var reg 32 x out [31:0] $end
$upscope $end
$scope module im1 $end
$var wire 32 y addr [31:0] $end
$var wire 1 5 clk $end
$var wire 32 z data [31:0] $end
$upscope $end
$scope module regr_im_s2 $end
$var wire 1 u clear $end
$var wire 1 5 clk $end
$var wire 1 v hold $end
$var wire 32 { in [31:0] $end
$var reg 32 | out [31:0] $end
$upscope $end
$scope module regm1 $end
$var wire 1 5 clk $end
$var wire 32 } data1 [31:0] $end
$var wire 32 ~ data2 [31:0] $end
$var wire 5 !" read1 [4:0] $end
$var wire 5 "" read2 [4:0] $end
$var wire 1 \ regwrite $end
$var wire 32 #" wrdata [31:0] $end
$var wire 5 $" wrreg [4:0] $end
$var reg 32 %" _data1 [31:0] $end
$var reg 32 &" _data2 [31:0] $end
$upscope $end
$scope module regr_s2_rs $end
$var wire 1 '" clear $end
$var wire 1 5 clk $end
$var wire 1 v hold $end
$var wire 5 (" in [4:0] $end
$var reg 5 )" out [4:0] $end
$upscope $end
$scope module reg_s2_mem $end
$var wire 1 *" clear $end
$var wire 1 5 clk $end
$var wire 1 v hold $end
$var wire 64 +" in [63:0] $end
$var reg 64 ," out [63:0] $end
$upscope $end
$scope module reg_s2_seimm $end
$var wire 1 *" clear $end
$var wire 1 5 clk $end
$var wire 1 v hold $end
$var wire 32 -" in [31:0] $end
$var reg 32 ." out [31:0] $end
$upscope $end
$scope module reg_s2_rt_rd $end
$var wire 1 *" clear $end
$var wire 1 5 clk $end
$var wire 1 v hold $end
$var wire 10 /" in [9:0] $end
$var reg 10 0" out [9:0] $end
$upscope $end
$scope module reg_pc4_s2 $end
$var wire 1 1" clear $end
$var wire 1 5 clk $end
$var wire 1 v hold $end
$var wire 32 2" in [31:0] $end
$var reg 32 3" out [31:0] $end
$upscope $end
$scope module ctl1 $end
$var wire 6 4" opcode [5:0] $end
$var reg 2 5" aluop [1:0] $end
$var reg 1 6" alusrc $end
$var reg 1 7" branch_eq $end
$var reg 1 8" branch_ne $end
$var reg 1 9" jump $end
$var reg 1 :" memread $end
$var reg 1 ;" memtoreg $end
$var reg 1 <" memwrite $end
$var reg 1 =" regdst $end
$var reg 1 >" regwrite $end
$upscope $end
$scope module reg_s2_control $end
$var wire 1 v clear $end
$var wire 1 5 clk $end
$var wire 1 ?" hold $end
$var wire 8 @" in [7:0] $end
$var reg 8 A" out [7:0] $end
$upscope $end
$scope module branch_s2_s3 $end
$var wire 1 *" clear $end
$var wire 1 5 clk $end
$var wire 1 B" hold $end
$var wire 2 C" in [1:0] $end
$var reg 2 D" out [1:0] $end
$upscope $end
$scope module baddr_s2_s3 $end
$var wire 1 *" clear $end
$var wire 1 5 clk $end
$var wire 1 E" hold $end
$var wire 32 F" in [31:0] $end
$var reg 32 G" out [31:0] $end
$upscope $end
$scope module reg_jump_s3 $end
$var wire 1 *" clear $end
$var wire 1 5 clk $end
$var wire 1 H" hold $end
$var wire 1 B in $end
$var reg 1 I" out $end
$upscope $end
$scope module reg_jaddr_s3 $end
$var wire 1 *" clear $end
$var wire 1 5 clk $end
$var wire 1 J" hold $end
$var wire 32 K" in [31:0] $end
$var reg 32 L" out [31:0] $end
$upscope $end
$scope module reg_s3 $end
$var wire 1 *" clear $end
$var wire 1 5 clk $end
$var wire 1 M" hold $end
$var wire 4 N" in [3:0] $end
$var reg 4 O" out [3:0] $end
$upscope $end
$scope module alu_ctl1 $end
$var wire 2 P" aluop [1:0] $end
$var wire 6 Q" funct [5:0] $end
$var reg 4 R" _funct [3:0] $end
$var reg 4 S" aluctl [3:0] $end
$upscope $end
$scope module alu1 $end
$var wire 32 T" a [31:0] $end
$var wire 32 U" add_ab [31:0] $end
$var wire 32 V" b [31:0] $end
$var wire 4 W" ctl [3:0] $end
$var wire 1 X" oflow $end
$var wire 1 Y" oflow_add $end
$var wire 1 Z" oflow_sub $end
$var wire 1 [" slt $end
$var wire 32 \" sub_ab [31:0] $end
$var wire 1 i zero $end
$var reg 32 ]" out [31:0] $end
$upscope $end
$scope module reg_zero_s3_s4 $end
$var wire 1 ^" clear $end
$var wire 1 5 clk $end
$var wire 1 _" hold $end
$var wire 1 i in $end
$var reg 1 `" out $end
$upscope $end
$scope module reg_alurslt $end
$var wire 1 a" clear $end
$var wire 1 5 clk $end
$var wire 1 b" hold $end
$var wire 32 c" in [31:0] $end
$var reg 32 d" out [31:0] $end
$upscope $end
$scope module reg_data2_s3 $end
$var wire 1 a" clear $end
$var wire 1 5 clk $end
$var wire 1 e" hold $end
$var wire 32 f" in [31:0] $end
$var reg 32 g" out [31:0] $end
$upscope $end
$scope module reg_wrreg $end
$var wire 1 a" clear $end
$var wire 1 5 clk $end
$var wire 1 h" hold $end
$var wire 5 i" in [4:0] $end
$var reg 5 j" out [4:0] $end
$upscope $end
$scope module branch_s3_s4 $end
$var wire 1 a" clear $end
$var wire 1 5 clk $end
$var wire 1 k" hold $end
$var wire 2 l" in [1:0] $end
$var reg 2 m" out [1:0] $end
$upscope $end
$scope module baddr_s3_s4 $end
$var wire 1 a" clear $end
$var wire 1 5 clk $end
$var wire 1 n" hold $end
$var wire 32 o" in [31:0] $end
$var reg 32 p" out [31:0] $end
$upscope $end
$scope module reg_jump_s4 $end
$var wire 1 a" clear $end
$var wire 1 5 clk $end
$var wire 1 q" hold $end
$var wire 1 C in $end
$var reg 1 r" out $end
$upscope $end
$scope module reg_jaddr_s4 $end
$var wire 1 a" clear $end
$var wire 1 5 clk $end
$var wire 1 s" hold $end
$var wire 32 t" in [31:0] $end
$var reg 32 u" out [31:0] $end
$upscope $end
$scope module reg_regwrite_s4 $end
$var wire 1 v" clear $end
$var wire 1 5 clk $end
$var wire 1 w" hold $end
$var wire 2 x" in [1:0] $end
$var reg 2 y" out [1:0] $end
$upscope $end
$scope module dm1 $end
$var wire 7 z" addr [6:0] $end
$var wire 1 5 clk $end
$var wire 1 G rd $end
$var wire 32 {" rdata [31:0] $end
$var wire 32 |" wdata [31:0] $end
$var wire 1 N wr $end
$upscope $end
$scope module reg_rdata_s4 $end
$var wire 1 }" clear $end
$var wire 1 5 clk $end
$var wire 1 ~" hold $end
$var wire 32 !# in [31:0] $end
$var reg 32 "# out [31:0] $end
$upscope $end
$scope module reg_alurslt_s4 $end
$var wire 1 ## clear $end
$var wire 1 5 clk $end
$var wire 1 $# hold $end
$var wire 32 %# in [31:0] $end
$var reg 32 &# out [31:0] $end
$upscope $end
$scope module reg_wrreg_s4 $end
$var wire 1 '# clear $end
$var wire 1 5 clk $end
$var wire 1 (# hold $end
$var wire 5 )# in [4:0] $end
$var reg 5 *# out [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx *#
bx )#
0(#
0'#
bx &#
bx %#
0$#
0##
bx "#
bx !#
0~"
0}"
bx |"
bx {"
bx z"
bx y"
bx x"
0w"
0v"
bx u"
bx t"
0s"
xr"
0q"
bx p"
bx o"
0n"
bx m"
bx l"
0k"
bx j"
bx i"
0h"
bx g"
bx f"
0e"
bx d"
bx c"
0b"
0a"
x`"
0_"
0^"
bx ]"
bx \"
x["
xZ"
xY"
xX"
b0 W"
bx V"
bx U"
bx T"
b0 S"
b0 R"
bx Q"
bx P"
bx O"
bx N"
0M"
bx L"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 K"
0J"
xI"
0H"
bx G"
bx F"
0E"
bx D"
b0 C"
0B"
bx A"
b10001010 @"
0?"
1>"
1="
0<"
0;"
0:"
09"
08"
07"
06"
b10 5"
bx 4"
bx 3"
bx 2"
01"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
0*"
bx )"
bx ("
0'"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
b100000000000100000000000000000 {
b100000000000100000000000000000 z
b0 y
bx x
b100 w
0v
0u
0t
0s
b0 r
bx q
bx p
b0 o
b0 n
0m
0l
0k
xj
xi
bx h
bx g
bx f
bx e
bx d
bx00 c
bx b
bx a
bx `
bx _
bx ^
bx ]
x\
x[
xZ
1Y
xX
1W
bx V
bx U
bx T
bx S
bx R
bx Q
b100 P
bx O
xN
xM
0L
xK
xJ
xI
0H
xG
xF
0E
xD
xC
0B
bx A
bx @
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 ?
bx >
b100000000000100000000000000000 =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
05
x4
x3
02
x1
x0
0/
bx .
bx -
bx ,
x+
bx *
0)
bx (
bx '
bx &
bx %
b10 $
b0 #
b0 "
0!
$end
#5
16"
1)
b0 5"
b0 $
0="
b11 @"
0W
b100 ,
b100 F"
b0 c
b0 %"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx +"
b0 6
b0 }
b0 a
b0 -"
b10000000000000000000 ?
b10000000000000000000 K"
b0 d
b0 <
b0 S
b1000000 /"
b10 _
b10 ""
b0 ]
b0 !"
b0 ("
b1000 O
b1000 4"
0+
1Z
b10 %
b10 P"
0I
0M
b1000 N"
0F
1X
03
b0 l"
00
b1000 P
b1000 w
b100000000000110000000000000001 =
b100000000000110000000000000001 z
b100000000000110000000000000001 {
b100 x
b100 Q
b100 2"
b100000000000100000000000000000 |
b100000000000100000000000000000 >
b10001010 A"
b0 D"
0I"
0C
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 L"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 @
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 t"
b100 r
b100 y
b1 "
1!
15
#10
0!
05
#15
b0 ]"
1i
b0 c"
b0 &
0X"
0["
0Y"
0Z"
b0 \"
b0 U"
b0 *
b0 V"
b10 S"
b10 #
b10 W"
b10 f
b10 i"
b10 R"
b0 p
b0 T"
b100 c
b1100 P
b1100 w
b100000000010000000000000000010 =
b100000000010000000000000000010 z
b100000000010000000000000000010 {
04
01
0N
0G
0J
b10 x"
1[
1+
b0 %
b0 P"
0X
b0 T
b10 `
b0 ;
b0 Q"
b0 7
b1 a
b1 -"
b11000000000000000100 ?
b11000000000000000100 K"
b1 <
b1100000 /"
b11 _
b11 ""
b1000 r
b1000 y
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 u"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 A
0r"
0D
b0 m"
b1000 O"
b10000000000000000000 L"
b10000000000000000000 @
b10000000000000000000 t"
b100 G"
b100 -
b100 o"
b11 A"
b100 3"
b100 R
b1000000 0"
b0 ."
b0 b
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,"
b0 )"
b0 ^
b100000000000110000000000000001 |
b100000000000110000000000000001 >
b1000 x
b1100 ,
b1100 F"
b1000 Q
b1000 2"
b10 "
1!
15
#20
0!
05
#25
b1 ]"
0i
b1 c"
b1 &
b0 o
1["
1Z"
b1000 c
b0 R"
b11 f
b11 i"
b0 z"
b10 a
b10 -"
b1000000000000000001000 ?
b1000000000000000001000 K"
b10 <
b100000000 /"
b1000 _
b1000 ""
b1 ;
b1 Q"
b11111111111111111111111111111111 \"
b1 U"
b1 *
b1 V"
b11 `
b0 '
b0 %#
0K
1\
b10000 P
b10000 w
b100000000010010000000000000011 =
b100000000010010000000000000011 z
b100000000010010000000000000011 {
b1100 x
b10100 ,
b10100 F"
b1100 Q
b1100 2"
b100000000010000000000000000010 |
b100000000010000000000000000010 >
b1 ."
b1 b
b1100000 0"
b1000 3"
b1000 R
b1100 G"
b1100 -
b1100 o"
b11000000000000000100 L"
b11000000000000000100 @
b11000000000000000100 t"
1`"
1j
b0 d"
b10 j"
b10 g
b10 )#
b100 p"
b100 .
b10000000000000000000 u"
b10000000000000000000 A
b10 y"
b1100 r
b1100 y
b11 "
1!
15
#30
0!
05
#35
b10 ]"
b10 c"
b10 &
b1000 f
b1000 i"
b110 R"
b1100 c
b10100 P
b10100 w
b100000000010100000000000000100 =
b100000000010100000000000000100 z
b100000000010100000000000000100 {
b0 e
b0 #"
b1 '
b1 %#
b1000 `
b10 ;
b10 Q"
b11111111111111111111111111111110 \"
b10 U"
b10 *
b10 V"
b11 a
b11 -"
b1001000000000000001100 ?
b1001000000000000001100 K"
b11 <
b100100000 /"
b1001 _
b1001 ""
b10000 r
b10000 y
b10 *#
b10 h
b10 $"
b0 &#
b0 (
b11000000000000000100 u"
b11000000000000000100 A
b1100 p"
b1100 .
b11 j"
b11 g
b11 )#
b1 d"
0`"
0j
b1000000000000000001000 L"
b1000000000000000001000 @
b1000000000000000001000 t"
b10100 G"
b10100 -
b10100 o"
b1100 3"
b1100 R
b100000000 0"
b10 ."
b10 b
b100000000010010000000000000011 |
b100000000010010000000000000011 >
b10000 x
b11100 ,
b11100 F"
b10000 Q
b10000 2"
b100 "
1!
15
#40
0!
05
#45
b11 ]"
b11 c"
b11 &
b0 o
b10000 c
b0 R"
b1001 f
b1001 i"
b100 a
b100 -"
b1010000000000000010000 ?
b1010000000000000010000 K"
b100 <
b101000000 /"
b1010 _
b1010 ""
b11 ;
b11 Q"
b11111111111111111111111111111101 \"
b11 U"
b11 *
b11 V"
b1001 `
b10 '
b10 %#
b1 e
b1 #"
b11000 P
b11000 w
b100000000010110000000000000101 =
b100000000010110000000000000101 z
b100000000010110000000000000101 {
b10100 x
b100100 ,
b100100 F"
b10100 Q
b10100 2"
b100000000010100000000000000100 |
b100000000010100000000000000100 >
b11 ."
b11 b
b100100000 0"
b10000 3"
b10000 R
b11100 G"
b11100 -
b11100 o"
b1001000000000000001100 L"
b1001000000000000001100 @
b1001000000000000001100 t"
b10 d"
b1000 j"
b1000 g
b1000 )#
b10100 p"
b10100 .
b1000000000000000001000 u"
b1000000000000000001000 A
b1 &#
b1 (
b11 *#
b11 h
b11 $"
b10100 r
b10100 y
b101 "
1!
15
#50
0!
05
#55
b100 ]"
b100 c"
b100 &
b1010 f
b1010 i"
b10100 c
b11100 P
b11100 w
b100000000011000000000000000110 =
b100000000011000000000000000110 z
b100000000011000000000000000110 {
b10 e
b10 #"
b11 '
b11 %#
b1010 `
b100 ;
b100 Q"
b11111111111111111111111111111100 \"
b100 U"
b100 *
b100 V"
b101 a
b101 -"
b1011000000000000010100 ?
b1011000000000000010100 K"
b101 <
b101100000 /"
b1011 _
b1011 ""
b11000 r
b11000 y
b1000 *#
b1000 h
b1000 $"
b10 &#
b10 (
b1001000000000000001100 u"
b1001000000000000001100 A
b11100 p"
b11100 .
b1001 j"
b1001 g
b1001 )#
b11 d"
b1010000000000000010000 L"
b1010000000000000010000 @
b1010000000000000010000 t"
b100100 G"
b100100 -
b100100 o"
b10100 3"
b10100 R
b101000000 0"
b100 ."
b100 b
b100000000010110000000000000101 |
b100000000010110000000000000101 >
b11000 x
b101100 ,
b101100 F"
b11000 Q
b11000 2"
b110 "
1!
15
#60
0!
05
#65
b101 ]"
b101 c"
b101 &
b0 o
b11000 c
b1 R"
b1011 f
b1011 i"
b1 z"
b110 a
b110 -"
b1100000000000000011000 ?
b1100000000000000011000 K"
b110 <
b110000000 /"
b1100 _
b1100 ""
b101 ;
b101 Q"
b11111111111111111111111111111011 \"
b101 U"
b101 *
b101 V"
b1011 `
b100 '
b100 %#
b11 e
b11 #"
b100000 P
b100000 w
b100000000011010000000000000111 =
b100000000011010000000000000111 z
b100000000011010000000000000111 {
b11100 x
b110100 ,
b110100 F"
b11100 Q
b11100 2"
b100000000011000000000000000110 |
b100000000011000000000000000110 >
b101 ."
b101 b
b101100000 0"
b11000 3"
b11000 R
b101100 G"
b101100 -
b101100 o"
b1011000000000000010100 L"
b1011000000000000010100 @
b1011000000000000010100 t"
b100 d"
b1010 j"
b1010 g
b1010 )#
b100100 p"
b100100 .
b1010000000000000010000 u"
b1010000000000000010000 A
b11 &#
b11 (
b1001 *#
b1001 h
b1001 $"
b11100 r
b11100 y
b111 "
1!
15
#70
0!
05
#75
b110 ]"
b110 c"
b110 &
b1100 f
b1100 i"
b1101 R"
b11100 c
b100100 P
b100100 w
b100000000011100000000000001000 =
b100000000011100000000000001000 z
b100000000011100000000000001000 {
b100 e
b100 #"
b101 '
b101 %#
b1100 `
b110 ;
b110 Q"
b11111111111111111111111111111010 \"
b110 U"
b110 *
b110 V"
b111 a
b111 -"
b1101000000000000011100 ?
b1101000000000000011100 K"
b111 <
b110100000 /"
b1101 _
b1101 ""
b100000 r
b100000 y
b1010 *#
b1010 h
b1010 $"
b100 &#
b100 (
b1011000000000000010100 u"
b1011000000000000010100 A
b101100 p"
b101100 .
b1011 j"
b1011 g
b1011 )#
b101 d"
b1100000000000000011000 L"
b1100000000000000011000 @
b1100000000000000011000 t"
b110100 G"
b110100 -
b110100 o"
b11100 3"
b11100 R
b110000000 0"
b110 ."
b110 b
b100000000011010000000000000111 |
b100000000011010000000000000111 >
b100000 x
b111100 ,
b111100 F"
b100000 Q
b100000 2"
b1000 "
1!
15
#80
0!
05
#85
b111 ]"
b111 c"
b111 &
b0 o
b100000 c
b1100 R"
b1101 f
b1101 i"
b1000 a
b1000 -"
b1110000000000000100000 ?
b1110000000000000100000 K"
b1000 <
b111000000 /"
b1110 _
b1110 ""
b111 ;
b111 Q"
b11111111111111111111111111111001 \"
b111 U"
b111 *
b111 V"
b1101 `
b110 '
b110 %#
b101 e
b101 #"
b101000 P
b101000 w
b100000000011110000000000001001 =
b100000000011110000000000001001 z
b100000000011110000000000001001 {
b100100 x
b1000100 ,
b1000100 F"
b100100 Q
b100100 2"
b100000000011100000000000001000 |
b100000000011100000000000001000 >
b111 ."
b111 b
b110100000 0"
b100000 3"
b100000 R
b111100 G"
b111100 -
b111100 o"
b1101000000000000011100 L"
b1101000000000000011100 @
b1101000000000000011100 t"
b110 d"
b1100 j"
b1100 g
b1100 )#
b110100 p"
b110100 .
b1100000000000000011000 u"
b1100000000000000011000 A
b101 &#
b101 (
b1011 *#
b1011 h
b1011 $"
b100100 r
b100100 y
b1001 "
1!
15
#90
0!
05
#95
b1000 ]"
b1000 c"
b1000 &
b1110 f
b1110 i"
b0 R"
b100100 c
b101100 P
b101100 w
b0 =
b0 z
b0 {
b110 e
b110 #"
b111 '
b111 %#
b1110 `
b1000 ;
b1000 Q"
b11111111111111111111111111111000 \"
b1000 U"
b1000 *
b1000 V"
b1001 a
b1001 -"
b1111000000000000100100 ?
b1111000000000000100100 K"
b1001 <
b111100000 /"
b1111 _
b1111 ""
b101000 r
b101000 y
b1100 *#
b1100 h
b1100 $"
b110 &#
b110 (
b1101000000000000011100 u"
b1101000000000000011100 A
b111100 p"
b111100 .
b1101 j"
b1101 g
b1101 )#
b111 d"
b1110000000000000100000 L"
b1110000000000000100000 @
b1110000000000000100000 t"
b1000100 G"
b1000100 -
b1000100 o"
b100100 3"
b100100 R
b111000000 0"
b1000 ."
b1000 b
b100000000011110000000000001001 |
b100000000011110000000000001001 >
b101000 x
b1001100 ,
b1001100 F"
b101000 Q
b101000 2"
b1010 "
1!
15
#100
0!
05
#105
1="
1W
06"
0)
b10 5"
b10001010 @"
b10 $
b1001 ]"
b1001 c"
b1001 &
b0 o
b0 c
b1111 f
b1111 i"
b10 z"
b0 &"
b0 +"
b0 8
b0 ~
b0 a
b0 -"
b0 ?
b0 K"
b0 <
b0 /"
b0 _
b0 ""
b0 O
b0 4"
b1001 ;
b1001 Q"
b11111111111111111111111111110111 \"
b1001 U"
b1001 *
b1001 V"
b1111 `
b1000 '
b1000 %#
b111 e
b111 #"
b110000 P
b110000 w
b101100 x
b101100 ,
b101100 F"
b101100 Q
b101100 2"
b0 |
b0 >
b1001 ."
b1001 b
b111100000 0"
b101000 3"
b101000 R
b1001100 G"
b1001100 -
b1001100 o"
b1111000000000000100100 L"
b1111000000000000100100 @
b1111000000000000100100 t"
b1000 d"
b1110 j"
b1110 g
b1110 )#
b1000100 p"
b1000100 .
b1110000000000000100000 u"
b1110000000000000100000 A
b111 &#
b111 (
b1101 *#
b1101 h
b1101 $"
b101100 r
b101100 y
b1011 "
1!
15
#110
0!
05
#115
b0 ]"
1i
b0 c"
b0 &
0["
0Z"
b0 f
b0 i"
b10 R"
b0 q
b0 f"
b110100 P
b110100 w
bx =
bx z
bx {
b1000 e
b1000 #"
b1001 '
b1001 %#
0+
b10 %
b10 P"
1X
b0 `
b0 ;
b0 Q"
b0 \"
b0 U"
b0 *
b0 V"
b0 9
b110000 r
b110000 y
b1110 *#
b1110 h
b1110 $"
b1000 &#
b1000 (
b1111000000000000100100 u"
b1111000000000000100100 A
b1001100 p"
b1001100 .
b1111 j"
b1111 g
b1111 )#
b1001 d"
b0 L"
b0 @
b0 t"
b101100 G"
b101100 -
b101100 o"
b10001010 A"
b101100 3"
b101100 R
b0 0"
b0 ."
b0 b
b0 ,"
b110000 x
b110000 ,
b110000 F"
b110000 Q
b110000 2"
b1100 "
1!
15
#120
0!
05
#125
b1 o
b1 n
bx00 c
b0 z"
bx &"
bx 8
bx ~
bx %"
bx +"
bx 6
bx }
bx a
bx -"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 ?
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 K"
bx d
bx <
bx S
bx /"
bx _
bx ""
bx ]
bx !"
bx ("
bx O
bx 4"
b0 '
b0 %#
b1001 e
b1001 #"
b111000 P
b111000 w
b110100 x
bx ,
bx F"
b110100 Q
b110100 2"
bx |
bx >
b110000 3"
b110000 R
b110000 G"
b110000 -
b110000 o"
1`"
1j
b0 d"
b0 g"
b0 :
b0 |"
b0 j"
b0 g
b0 )#
b101100 p"
b101100 .
b0 u"
b0 A
b1001 &#
b1001 (
b1111 *#
b1111 h
b1111 $"
b110100 r
b110100 y
b1101 "
1!
15
#130
0!
05
#135
bx ]"
xi
bx c"
bx &
xX"
xY"
xZ"
x["
bx *
bx V"
bx q
bx f"
bx p
bx T"
bx \"
bx U"
b0 o
b0 n
b0 S"
b0 #
b0 W"
bx f
bx i"
b0 R"
b111100 P
b111100 w
b0 e
b0 #"
bx T
bx `
bx ;
bx Q"
bx 9
bx 7
b111000 r
b111000 y
b0 *#
b0 h
b0 $"
b0 &#
b0 (
b110000 p"
b110000 .
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 L"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 @
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 t"
bx G"
bx -
bx o"
b110100 3"
b110100 R
bx 0"
bx ."
bx b
bx ,"
bx )"
bx ^
b111000 x
b111000 Q
b111000 2"
b1110 "
1!
15
#140
0!
05
#145
bx z"
bx '
bx %#
b1000000 P
b1000000 w
b111100 x
b111100 Q
b111100 2"
b111000 3"
b111000 R
x`"
xj
bx d"
bx g"
bx :
bx |"
bx j"
bx g
bx )#
bx p"
bx .
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 u"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 A
b111100 r
b111100 y
b1111 "
1!
15
#150
0!
05
#155
b1000100 P
b1000100 w
bx e
bx #"
b1000000 r
b1000000 y
bx *#
bx h
bx $"
bx &#
bx (
b111100 3"
b111100 R
b1000000 x
b1000000 Q
b1000000 2"
b10000 "
1!
15
#160
0!
05
#165
b1001000 P
b1001000 w
b1000100 x
b1000100 Q
b1000100 2"
b1000000 3"
b1000000 R
b1000100 r
b1000100 y
b10001 "
1!
15
